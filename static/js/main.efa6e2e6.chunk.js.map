{"version":3,"sources":["Components/Header.js","Components/Display.js","Components/Counter.js","Components/Buttons.js","Components/Form.js","Components/App.js","index.js"],"names":["Header","props","className","gameChoice","Display","message","Counter","standardHighscore","guesses","expertHighscore","Buttons","onClick","e","handleGameChoice","disabled","Form","Fragment","onSubmit","submitGuess","type","onChange","getUserGuess","value","userGuess","placeholder","name","newGame","resetChoice","initialState","randomNum","App","state","handleRandomNum","choice","Math","floor","random","setState","target","preventDefault","answer","highscore","parseInt","mode","countMessage","num","this","myValue","clearInput","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.efa6e2e6.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props) => {\n    return (\n        <header>\n            <h1>\n                <span \n                className={props.gameChoice === \"\" ? \"blink\" : null}>\n                {props.gameChoice === \"\" ? \"Start Game\" : \"Guess Game\"}\n                </span>\n            </h1>\n            <p>Press Standard or Expert to begin</p>\n        </header>\n    );\n}\n\nexport default Header;","import React from 'react';\n\n\nconst Display = (props) => {\n    return (\n        <div className=\"display\">\n                <div className=\"display-rules\">\n                    <p className=\"display-rules-headline\">Rules:</p> \n                    <p>{props.gameChoice === \"\" ? null : props.gameChoice === \"Standard\" ? \"Choose number from 1 to 10\":\"Choose number from 1 to 100\"}</p>\n                </div>        \n            <p className=\"display-message\">{props.message === \"\" ? \"...\" : props.message}</p>\n        </div>\n    );\n}\n\nexport default Display;","import React from 'react'; \nimport Display from './Display';\n\nconst Counter = (props) => {\n    return (\n    <div className=\"center\">\n        <div className={`counter ${props.gameChoice === \"\" || props.gameChoice === \"Expert\" ? \"not-here\" : \"here\"}`}>\n            <p className=\"counter-headline\">Standard</p>\n            <div className=\"counter-score\">\n            <p>High Score: {props.standardHighscore}</p>\n            <p>Guesses: {props.guesses}</p>\n            </div>\n            \n        </div>\n\n            <Display \n            gameChoice={props.gameChoice}\n            message={props.message}\n            standardHighscore={props.standardHighscore}\n            expertHighscore={props.expertHighscore}\n            guesses={props.guesses}/>\n\n        <div className={`counter ${props.gameChoice === \"\" || props.gameChoice === \"Standard\" ? \"not-here\" : \"here\"}`} >   \n            <p className=\"counter-headline\">Expert</p>\n            <div className=\"counter-score\">\n            <p>High Score: {props.expertHighscore}</p>\n            <p>Guesses: {props.guesses}</p>\n            </div>\n        \n        </div>\n        \n    </div>\n    );\n}\nexport default Counter;","import React from 'react';\n\nconst Buttons = (props) => {\n    return (\n    <div className=\"main-btns\">\n         <button \n        onClick={(e) => props.handleGameChoice('Standard', e)}\n        disabled={props.gameChoice === \"Standard\" || props.gameChoice === '' ? false : true}>\n          Standard\n        </button>\n        <button\n        onClick={(e) => props.handleGameChoice('Expert', e)}\n        disabled={props.gameChoice === \"Expert\" || props.gameChoice === ''? false : true}>\n          Expert\n        </button>\n    </div>\n\n    );\n}\n\nexport default Buttons;","import React from 'react';\n\nconst Form = (props) => {\n        return (\n            <React.Fragment>\n            <form onSubmit={props.submitGuess}>\n                <input \n                type=\"text\"\n                onChange={props.getUserGuess}\n                value = {props.userGuess}\n                placeholder=\"Guess\"/>\n\n                <button\n                type=\"submit\"\n                name=\"submit\"\n                value=\"submit\">Submit</button>\n    \n                <button\n                \n                onClick={props.newGame}>\n                New Game\n                </button>\n                \n            </form>\n    \n            <div className=\"reset\">\n            <button \n            type=\"reset\"\n            onClick={props.resetChoice}>\n            Reset Game Mode\n            </button>\n            </div>\n            </React.Fragment>\n        );\n    \n}\n\nexport default Form; ","import React, { Component } from 'react';\nimport Header from './Header';\nimport Counter from './Counter';\nimport Buttons from './Buttons';\n\nimport Form from './Form';\n\n// initial state for the game, inserted into state using spread operator\nconst initialState = {\n  userGuess: '',\n  message: '',\n  guesses: 0,\n  randomNum: 0,\n  gameChoice : \"\"\n}\n\nclass App extends Component {\n  state = {\n    ...initialState,\n    expertHighscore: 0,\n    standardHighscore: 0,\n  }\n\n  // function to handle randomNum\n  handleRandomNum = (choice) => {\n    if(choice === 'Standard'){\n      return Math.floor(Math.random()*10 + 1);\n    } \n    if(choice === 'Expert') {\n      return Math.floor(Math.random()*100 + 1);\n    }\n  }\n\n  //gets users guess\n  getUserGuess = (e) => {\n    this.setState({\n      userGuess: e.target.value\n    })\n  }\n\n  // starts game based on user choice and generates random number\n  handleGameChoice = (choice, e) => {\n    e.preventDefault();\n    let answer = this.handleRandomNum(choice);\n\n    this.setState({\n      randomNum: answer,\n      gameChoice: choice\n    })\n  }\n\n  //compares and gives feedback\nsubmitGuess = (e) => {\n  e.preventDefault();\n  let userGuess = parseInt(this.state.userGuess);\n  let mode = this.state.gameChoice;\n  let guesses = this.state.guesses + 1;\n  let answer = this.state.randomNum;\n\n  let highscore;\n\n  if(mode === 'Standard'){\n    highscore = this.state.standardHighscore\n  } else {\n    highscore = this.state.expertHighscore\n  }\n\n  let countMessage = `Only took you ${guesses} ${(guesses) === 1 ? \"try\" : \"tries\"}!`\n  //you need an if statement that compares user guess to computer answer\n  //if the user guess is less or greater than answer give the user feedback\n  if(mode === 'Standard'){\n    this.setState({\n      ...this.state,\n      guesses: guesses,\n      userGuess: ''\n    })\n    if(userGuess < answer){\n      this.setState({\n        message: \"Try a bigger number\",\n      });\n    }\n    if(userGuess > answer){\n      this.setState({\n        message: \"Try a smaller number\",\n      });\n    }\n    //if the user guess is equal to the answer tell them they've won\n    //if this is their first game its their high score\n    if(userGuess === answer){\n      let num = this.handleRandomNum(\"Standard\")\n      this.setState({\n        randomNum: num,\n        guesses: 0\n      })\n      if(highscore === 0){\n        this.setState({\n          standardHighscore: guesses,\n          message: `You're right ${countMessage}`,\n        });\n      }\n      //else if its not their first game and they got a higher score than previous high score they've beat their high score\n      if(highscore !== 0 && guesses < highscore ){\n        this.setState({\n          standardHighscore : guesses,\n          message: `You beat your high score`,\n        });\n      }\n      if(highscore === guesses || guesses > highscore){\n        this.setState({\n          message: `You're right ${countMessage}`,\n        });\n      }\n    }\n  }\n\n  //you need an if statement that compares user guess to computer answer\n  //if the user guess is less or greater than answer give the user feedback\n  if(mode === 'Expert'){\n    this.setState({\n      ...this.state,\n      guesses: guesses,\n      userGuess: ''\n    })\n    if(userGuess < answer){\n      this.setState({\n        message: \"Try a bigger number\",\n      });\n    }\n    if(userGuess > answer){\n      this.setState({\n        message: \"Try a smaller number\",\n      });\n    }\n    //if the user guess is equal to the answer tell them they've won\n    //if this is their first game its their high score\n    if(userGuess === answer){\n      let num = this.handleRandomNum(\"Expert\")\n      this.setState({\n        randomNum: num,\n        guesses: 0\n      })\n      if(highscore === 0){\n        this.setState({\n          expertHighscore: guesses,\n          message: `You're right ${countMessage}`,\n        });\n      }\n      //else if its not their first game and they got a higher score than previous high score they've beat their high score\n      if(highscore !== 0 && guesses < highscore ){\n        this.setState({\n          expertHighscore : guesses,\n          message: `You beat your high score`,\n        });\n      }\n      if(highscore === guesses || guesses > highscore){\n        this.setState({\n          message: `You're right ${countMessage}`,\n        });\n      }\n    }\n  }\n}\n\n  // resets user choice\n  resetChoice = (e) => {\n    e.preventDefault();\n    this.setState({\n      ...initialState})\n  }\n  \n  // new game\n    newGame = (e) => {\n    e.preventDefault();\n    let mode = this.state.gameChoice;\n\n    if(mode === \"Standard\"){\n      this.setState({\n        ...initialState,\n        gameChoice: \"Standard\",\n        randomNum: this.handleRandomNum('Standard')\n      })\n    }\n    if(mode === \"Expert\"){\n      this.setState({\n        ...initialState,\n        gameChoice: \"Expert\",\n        randomNum: this.handleRandomNum('Expert')\n      })\n    }\n  }\n\n\n  render () {\n    return (\n      <React.Fragment >\n        <Header \n        gameChoice={this.state.gameChoice}/>\n\n        <Buttons \n        handleGameChoice={this.handleGameChoice}\n        gameChoice={this.state.gameChoice}/>\n\n      <div className={this.state.gameChoice===\"\"? \"not-here\" : \"here\"}>\n        <Counter \n        gameChoice={this.state.gameChoice}\n        guesses={this.state.guesses}\n        standardHighscore={this.state.standardHighscore}\n        expertHighscore={this.state.expertHighscore}\n        message={this.state.message}/>\n\n        <Form \n        userGuess={this.state.userGuess}\n        myValue={this.state.myValue}\n        clearInput={this.clearInput}\n        getUserGuess={this.getUserGuess}\n        submitGuess={this.submitGuess}\n        newGame={this.newGame}\n        resetChoice={this.resetChoice}/>\n      </div>\n\n</React.Fragment>\n\n\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\n\nReactDOM.render(\n    <App />, \n    document.getElementById('root'));\n"],"sourceRoot":""}